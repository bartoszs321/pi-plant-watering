/**
 * Generated by orval v6.22.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
    BodyLoginForAccessTokenTokenPost,
    BodyUpdateUserUserPost,
    Token,
    User,
    WateringConfig,
} from './models';

/**
 * @summary Login For Access Token
 */
export const loginForAccessTokenTokenPost = <TData = AxiosResponse<Token>>(
    bodyLoginForAccessTokenTokenPost: BodyLoginForAccessTokenTokenPost,
    options?: AxiosRequestConfig
): Promise<TData> => {
    const formUrlEncoded = new URLSearchParams();
    if (bodyLoginForAccessTokenTokenPost.grant_type !== undefined) {
        formUrlEncoded.append(
            'grant_type',
            bodyLoginForAccessTokenTokenPost.grant_type
        );
    }
    formUrlEncoded.append(
        'username',
        bodyLoginForAccessTokenTokenPost.username
    );
    formUrlEncoded.append(
        'password',
        bodyLoginForAccessTokenTokenPost.password
    );
    if (bodyLoginForAccessTokenTokenPost.scope !== undefined) {
        formUrlEncoded.append('scope', bodyLoginForAccessTokenTokenPost.scope);
    }
    if (bodyLoginForAccessTokenTokenPost.client_id !== undefined) {
        formUrlEncoded.append(
            'client_id',
            bodyLoginForAccessTokenTokenPost.client_id
        );
    }
    if (bodyLoginForAccessTokenTokenPost.client_secret !== undefined) {
        formUrlEncoded.append(
            'client_secret',
            bodyLoginForAccessTokenTokenPost.client_secret
        );
    }

    return axios.post(`/token`, formUrlEncoded, options);
};

/**
 * @summary Read Users Me
 */
export const readUsersMeUsersMeGet = <TData = AxiosResponse<User>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`/users/me/`, options);
};

/**
 * @summary Update User
 */
export const updateUserUserPost = <TData = AxiosResponse<unknown>>(
    bodyUpdateUserUserPost: BodyUpdateUserUserPost,
    options?: AxiosRequestConfig
): Promise<TData> => {
    const formUrlEncoded = new URLSearchParams();
    formUrlEncoded.append('new_password', bodyUpdateUserUserPost.new_password);

    return axios.post(`/user`, formUrlEncoded, options);
};

/**
 * @summary Start Watering
 */
export const startWateringWateringStartPost = <TData = AxiosResponse<unknown>>(
    wateringConfig: WateringConfig,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(`/watering/start`, wateringConfig, options);
};

/**
 * @summary Stop Watering
 */
export const stopWateringwateringStopGet = <TData = AxiosResponse<unknown>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`/watering/stop`, options);
};

/**
 * @summary Proxy Video
 */
export const proxyVideoCameraFeedGet = <TData = AxiosResponse<unknown>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`/camera-feed`, options);
};

export type LoginForAccessTokenTokenPostResult = AxiosResponse<Token>;
export type ReadUsersMeUsersMeGetResult = AxiosResponse<User>;
export type UpdateUserUserPostResult = AxiosResponse<unknown>;
export type StartWateringWateringStartPostResult = AxiosResponse<unknown>;
export type StopWateringwateringStopGetResult = AxiosResponse<unknown>;
export type ProxyVideoCameraFeedGetResult = AxiosResponse<unknown>;
