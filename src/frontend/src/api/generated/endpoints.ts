/**
 * Generated by orval v6.22.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import type {
    BodyPostLoginLoginTokenPost,
    BodyUpdateUserUsersPasswordPost,
    Token,
    User,
    WateringConfig,
} from './models';
import { useCustomAxios } from '../custom-axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
    config: any,
    args: infer P
) => any
    ? P
    : never;

export const getFastAPI = () => {
    /**
     * @summary Post Login
     */
    const postLogin = (
        bodyPostLoginLoginTokenPost: BodyPostLoginLoginTokenPost,
        options?: SecondParameter<typeof useCustomAxios>
    ) => {
        const formUrlEncoded = new URLSearchParams();
        if (bodyPostLoginLoginTokenPost.grant_type !== undefined) {
            formUrlEncoded.append(
                'grant_type',
                bodyPostLoginLoginTokenPost.grant_type
            );
        }
        formUrlEncoded.append('username', bodyPostLoginLoginTokenPost.username);
        formUrlEncoded.append('password', bodyPostLoginLoginTokenPost.password);
        if (bodyPostLoginLoginTokenPost.scope !== undefined) {
            formUrlEncoded.append('scope', bodyPostLoginLoginTokenPost.scope);
        }
        if (bodyPostLoginLoginTokenPost.client_id !== undefined) {
            formUrlEncoded.append(
                'client_id',
                bodyPostLoginLoginTokenPost.client_id
            );
        }
        if (bodyPostLoginLoginTokenPost.client_secret !== undefined) {
            formUrlEncoded.append(
                'client_secret',
                bodyPostLoginLoginTokenPost.client_secret
            );
        }

        return useCustomAxios<Token>(
            {
                url: `/login/token`,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                data: formUrlEncoded,
            },
            options
        );
    };

    /**
     * @summary Get Current User Info
     */
    const getCurrentUserInfo = (
        options?: SecondParameter<typeof useCustomAxios>
    ) => {
        return useCustomAxios<User>(
            { url: `/users/me`, method: 'GET' },
            options
        );
    };

    /**
     * @summary Update User
     */
    const updateUser = (
        bodyUpdateUserUsersPasswordPost: BodyUpdateUserUsersPasswordPost,
        options?: SecondParameter<typeof useCustomAxios>
    ) => {
        const formUrlEncoded = new URLSearchParams();
        formUrlEncoded.append(
            'new_password',
            bodyUpdateUserUsersPasswordPost.new_password
        );

        return useCustomAxios<unknown>(
            {
                url: `/users/password`,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                data: formUrlEncoded,
            },
            options
        );
    };

    /**
     * @summary Start Watering
     */
    const startWatering = (
        wateringConfig: WateringConfig,
        options?: SecondParameter<typeof useCustomAxios>
    ) => {
        return useCustomAxios<unknown>(
            {
                url: `/watering/start`,
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                data: wateringConfig,
            },
            options
        );
    };

    /**
     * @summary Stop Watering
     */
    const stopWatering = (options?: SecondParameter<typeof useCustomAxios>) => {
        return useCustomAxios<unknown>(
            { url: `/watering/stop`, method: 'GET' },
            options
        );
    };

    /**
     * @summary Proxy Video
     */
    const proxyVideo = (options?: SecondParameter<typeof useCustomAxios>) => {
        return useCustomAxios<unknown>(
            { url: `/camera-feed`, method: 'GET' },
            options
        );
    };

    return {
        postLogin,
        getCurrentUserInfo,
        updateUser,
        startWatering,
        stopWatering,
        proxyVideo,
    };
};
export type PostLoginResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getFastAPI>['postLogin']>>
>;
export type GetCurrentUserInfoResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getFastAPI>['getCurrentUserInfo']>>
>;
export type UpdateUserResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getFastAPI>['updateUser']>>
>;
export type StartWateringResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getFastAPI>['startWatering']>>
>;
export type StopWateringResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getFastAPI>['stopWatering']>>
>;
export type ProxyVideoResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getFastAPI>['proxyVideo']>>
>;
